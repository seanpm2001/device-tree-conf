#!/usr/bin/python3

import sys
import getopt
import time
import os
import subprocess
import shutil
import logging
import typing
import argparse
import git
from pyfdt.pyfdt import *
from overlay_parser import OverlayParser

class DTConf:
    """ Singleton class used to manage former global vars and argument parsing

        Allow easy implementation of "command interface"
    """
    commands = [
        {
            "command": "build",
            "description": "compiles device tree overlays from source (dts) to binary (dtb) format.",
            "createparser": "build_createparser"
        },
        {
            "command": "status",
            "description": "show current state of device trees and overlays.",
            "createparser": "status_createparser"

        },
        {
            "command": "validate",
            "description": "validate binary device tree overlays.",
            "createparser": "validate_createparser"
        },
        {
            "command": "enable",
            "description": "enable a binary device tree overlay.",
            "createparser": "enable_createparser"
        },
        {
            "command": "disable",
            "description": "disable binary device tree overlays.",
            "createparser": "disable_createparser"
        },
        {
            "command": "activate",
            "description": "Build, validate and enable a source device tree overlay (dts).",
            "createparser": "activate_createparser"
        },
        {
            "command": "print",
            "description": "Dumps binary device-tree overlays in human readable format.",
            "createparser": "print_createparser"
        }]

    products = [
        ("colibri imx6", ["0014", "0015", "0016", "0017"], "arm32"),
        ("apalis imx6", ["0027", "0028", "0029", "0035"], "arm32"),
        ("colibri imx7", ["0032", "0033", "0039"], "arm32"),
        ("colibri imx6ull", ["0036", "0040", "0044", "0045"], "arm32"),
        ("apalis imx8", ["0037", "0047", "0048", "0049", "0046"], "arm64"),
        ("colibri imx8", ["0038", "0050", "0051", "0052"], "arm64"),
        ("apalis imx8x", ["2600", "0046", "0053", "0054"], "arm64"),
        ("verdin imx8mm", ["0055"], "arm64")
    ]

    errormessages = {
       1: "FDT_ERR_NOTFOUND: The requested node or property does not exist.",
       2: "FDT_ERR_EXISTS: Attempted to create a node or property which"
          "already exists.",
       3: "FDT_ERR_NOSPACE: Operation needed to expand the device "
          "tree, but its buffer did not have sufficient space to "
          "contain the expanded tree. Use fdt_open_into ) to move the "
          "device tree to a buffer with more space.",
       4: "FDT_ERR_BADOFFSET: Function was passed a structure block "
          "offset which is out-of-bounds, or which points to an "
          "unsuitable part of the structure for the operation.",
       5: "FDT_ERR_BADPATH: Function was passed a badly formatted path "
          " e.g. missing a leading / for a function which requires an "
          "absolute path).",
       6: "FDT_ERR_BADPHANDLE: Function was passed an invalid phandle.\n"
          "This can be caused either by an invalid phandle property "
          "length, or the phandle value was either 0 or -1, which are "
          "not permitted.",
       7: "FDT_ERR_BADSTATE: Function was passed an incomplete device "
          "tree created by the sequential-write functions, which is "
          "not sufficiently complete for the requested operation.",
       8: "FDT_ERR_TRUNCATED: FDT or a sub-block is improperly "
          "terminated overflows, goes outside allowed bounds, or "
          "isn't properly terminated).",
       9: "FDT_ERR_BADMAGIC: Given \"device tree\" appears not to be a "
          "device tree at all - it is missing the flattened device "
          "tree magic number.",
      10: "FDT_ERR_BADVERSION: Given device tree has a version which "
          "can't be handled by the requested operation.  For "
          "read-write functions, this may mean that fdt_open_into ) is "
          "required to convert the tree to the expected version.",
      11: "FDT_ERR_BADSTRUCTURE: Given device tree has a corrupt "
          "structure block or other serious error e.g. misnested "
          "nodes, or subnodes preceding properties).",
      12: "FDT_ERR_BADLAYOUT: For read-write functions, the given "
          "device tree has it's sub-blocks in an order that the "
          "function can't handle memory reserve map, then structure, "
          "then strings).  Use fdt_open_into ) to reorganize the tree "
          "into a form suitable for the read-write operations.",
      13: "FDT_ERR_INTERNAL: libfdt has failed an internal assertion. "
          "Should never be returned, if it is, it indicates a bug in "
          "libfdt itself.",
      14: "FDT_ERR_BADNCELLS: Device tree has a  #address-cells, #size-cells "
            "or similar property with a bad format or value",
      15: "FDT_ERR_BADVALUE: Device tree has a property with an unexpected "
          "value. For example: a property expected to contain a string list "
            "is not NUL-terminated within the length of its value.",
      16: "FDT_ERR_BADOVERLAY: The device tree overlay, while "
          "correctly structured, cannot be applied due to some "
            "unexpected or missing value, property or node.",
      17: "FDT_ERR_NOPHANDLES: The device tree doesn't have any "
            "phandle available anymore without causing an overflow.",
      18: "FDT_ERR_BADFLAGS: The function was passed a flags field that "
          "contains invalid flags or an invalid combination of flags." }

    def __init__(self):
        """ Basic initialization
        """
        self.product_id = None

        self.bootmnt = "/mnt/part"
        self.gitrepo = "/device-tree-overlays"
        self.userepo = True
        self.dogitpull = False
        self.platform = ""
        self.gitbranch = None

        # configures logging: errors and warnings on stderr, regular messages on stdout
        self.logger = logging.getLogger()

        self.logger.setLevel(logging.INFO)

        logstdout = logging.StreamHandler(sys.stdout)
        logstdout.setLevel(logging.INFO)
        logstdout.addFilter(lambda record: record.levelno <= logging.INFO)
        logstdout.setFormatter(logging.Formatter("%(message)s"))

        logstderr=logging.StreamHandler(sys.stderr)
        logstderr.setLevel(logging.WARNING)
        logstderr.setFormatter(logging.Formatter("%(message)s"))

        self.logger.addHandler(logstdout)
        self.logger.addHandler(logstderr)

    def setup(self) -> bool:
        """ Module initialization, detect module type and mounts boot partition.

            It must be called before any other function call from this module
        """

        bootpart="/dev/disk/by-label/BOOT"

        with open("/proc/device-tree/toradex,product-id", "r") as f:
            productstr=f.readline()

        productstr=productstr[:-1]

        for product in DTConf.products:
            for productid in product[1]:
                if productid == productstr:
                    self.product_id=productid
                    self.platform = product[2]
                    logging.info(
                        "Device is "+product[0]+"("+self.product_id+")")
                    break

            if self.product_id is not None:
                break

        if self.product_id is None:
            logging.error(
                "Unknown device (check that container is running in privileged mode and with the suggested command line parameters).")
            return False

        if not os.path.ismount(self.bootmnt):
            logging.info("Mounting "+self.bootmnt)

            if not os.path.exists(self.bootmnt):
                os.mkdir(self.bootmnt)

            if subprocess.run(["mount", bootpart, self.bootmnt]).returncode != 0:
                logging.error("Failed to mount "+bootpart+" "+self.bootmnt)
                return False

        return True

    def add_repo_parms(self, parser):

        parser.add_argument("--no-git-repo", dest="norepo", help="Use an overlay that is not in the Toradex git repo",
                            action="store_true", default=False)
        parser.add_argument("--do-git-pull", dest="dopull", help="Pull latest version of the overlays (requires an internet connection)",
                            action="store_true", default=False)
        parser.add_argument("--git-repo", dest="gitrepo", help="path of a different git repo to be used for the overlays",
                            action="store", default=self.gitrepo)
        parser.add_argument("--git-branch", dest="gitbranch", help="git branch to be used for the overlays",
                            action="store", default=None)

    def process_repo_args(self, args):

        if args.norepo == True:
            self.userepo=False
        else:
            self.gitrepo=args.gitrepo
            self.dogitpull=args.dopull
            self.gitbranch=args.gitbranch

    def get_kernel_version(self):
        # try to find a branch matching current kernel version
        uname = os.uname()
        return uname.release.split(".")[0:2] 

    def find_branch(self,repo):

        kernelmaj, kernelmin=self.get_kernel_version()

        prefix="origin/toradex_"+kernelmaj+"."+kernelmin
        
        ref = None
        for branch in repo.remotes["origin"].refs:
            if branch.name.startswith(prefix):
                if len(branch.name)==len(prefix) or not branch.name[len(prefix)].isnumeric():
                    if ref is not None:
                        raise Exception(
                    "Multiple branches match running kernel version ("+kernelmaj+"."+kernelmin+")")
                ref=branch
        return ref

    def git_checkout(self):

        repo=git.Repo(path=self.gitrepo)
        #fetches new branches
        if self.dogitpull:
            repo.remote("origin").fetch()

        if repo.bare:
            raise Exception("git repo seem to be empty.")

        ref=None

        if self.gitbranch is not None:
            ref = next((h for h in repo.remotes["origin"].refs if h.name == "origin/"+self.gitbranch), None)

            if ref is None:
                raise Exception(
                    "Required branch does not exist")

        else:
            kernelmaj, kernelmin=self.get_kernel_version()

            ref = self.find_branch(repo)
            
            if ref is None:
                print("No branch matching running kernel version ("+kernelmaj+"."+kernelmin+")")
                answer = str(input("Do you want to pull the latest overlays from the git repo? (y/n)"))
                if answer in ['y']:  
                    repo.remote("origin").fetch()
                    ref = self.find_branch(repo)                           
                
                if ref is None:
                    raise Exception(
                         "No branch matching running kernel version ("+kernelmaj+"."+kernelmin+")")

        ref.checkout()

        # update repo
        if self.dogitpull:
            repo.remote("origin").pull(branch.name[len("origin/"):])


    def status_createparser(self, parser):

        self.add_repo_parms(parser)

        parser.add_argument("-s", "--short", dest="short",
                            help="Only show overlay names without description",
                            action="store_true")

        parser.set_defaults(func=self.status)

        return parser

    def status(self, args) -> int:

        self.process_repo_args(args)

        self.setup()

        currentoverlays=self.get_active_overlays()[1]
        if len(currentoverlays) > 0:
            logging.info("Currently active overlays:")
            for overlay in currentoverlays:
                logging.info(overlay)
        else:
            logging.info("No active overlays")

        logging.info("Available base device trees:")

        searchpath=self.get_dt_search_path()

        for path in os.listdir(searchpath):
            if (path.endswith(".dtb")):
                if os.path.isfile(os.path.join(searchpath, path)):
                    logging.info("\t"+path)

        if not self.userepo:
            return 0

        self.git_checkout()

        overlayspath=os.path.join(self.gitrepo, "overlays")

        if not os.path.exists(overlayspath):
            logging.warning("No overlays are available for running kernel.")
        else:
            logging.info("Available overlays for running kernel:")

            for path in sorted(os.listdir(overlayspath)):
                if (path.endswith(".dts")):
                    overlay_path = os.path.join(overlayspath, path)
                    if os.path.isfile(overlay_path):
                        parser = OverlayParser(overlay_path)
                        if parser.check_compatibility():
                            parser.parse()
                            if args.short:
                                logging.info("\t"+path)
                            else:
                                logging.info("\t"+path+":")
                                logging.info("\t\t"+parser.description)

        return 0

    def build_createparser(self, parser):

        self.add_repo_parms(parser)

        parser.add_argument("filename", help="dts file(s) to be compiled", action="store",
                            nargs="+", type=str)
        parser.add_argument("-o", "--output-path", help="output path for the compiled file(s)",
                            dest="outputpath", action="store", type=str, default=None)

        parser.set_defaults(func=self.build)

        return parser

    def build(self, args) -> int:

        self.process_repo_args(args)

        self.setup()

        if self.userepo:
            self.git_checkout()

        includepaths = []

        if self.userepo:
            includepaths.append(os.path.join(self.gitrepo, "include"))
            includepaths.append(os.path.join(self.gitrepo, "dts-"+self.platform))

        for overlay in args.filename:
            overlaypath=overlay

            if self.userepo:
                overlaypath=os.path.join(self.gitrepo, "overlays")
                overlaypath=os.path.join(overlaypath, overlay)

            self.build_dtb(overlaypath, args.outputpath, includepaths)

        return 0

    def validate_createparser(self, parser):

        parser.add_argument("filename", help="dtb file(s) to be validated", action="store",
                            nargs="+", type=str)
        parser.add_argument("-c", "--current-device-tree", help="currently active device tree",
                            dest="currentdevicetree", action="store", type=str, default=None)

    def validate(self, args) -> int:

        retval=0

        self.setup()

        for overlay in args.filename:
            overlaypath=overlay

            if not self.validate_dtb(overlaypath, args.currentdevicetree):
                logging.error("Validation of "+overlay+" failed.")
                retval=1
            else:
                logging.info("Validation of "+overlay+" completed.")

        return retval

    def enable_createparser(self, parser):

        parser.add_argument("filename", help="dtb file(s) to be enabled", action="store",
                            nargs="+", type=str)

        parser.set_defaults(func=self.enable)

    def enable(self, args) -> int:

        self.setup()

        for overlay in args.filename:
            self.enable_overlay(overlay)
            logging.info("Overlay file " + overlay + " has been enabled")

    def disable_createparser(self, parser):

        parser.add_argument("filename", help="dtb file(s) to be disabled", action="store",
                            nargs="*", type=str)
        parser.add_argument("--all", help="disables all overlay", action="store_true",
                            default=False)
        parser.set_defaults(func=self.disable)

    def disable(self, args) -> int:

        self.setup()

        if args.all:
            self.disable_all_overlays()
            logging.info("All active overlays have been disabled.")
        else:

            for overlay in args.filename:
                self.disable_overlay(overlay)
                logging.info("Overlay file " + overlay + " has been disabled")

    def activate_createparser(self, parser):

        self.add_repo_parms(parser)

        parser.add_argument("filename", help="dts file(s) to be validated", action="store",
                            nargs="+", type=str)
        parser.add_argument("-c", "--current-device-tree", help="currently active device tree",
                            dest="currentdevicetree", action="store", type=str, default=None)
        parser.set_defaults(func=self.activate)

    def activate(self, args) -> int:

        self.process_repo_args(args)

        self.setup()

        if self.userepo:
            self.git_checkout()

        self.activate_overlays(args.filename, args.currentdevicetree)

    def print_createparser(self, parser):
        parser.add_argument("filename", help="dtb file(s) to be dumped", action="store",
                            nargs="*", type=str)

        parser.add_argument("-b", "--bare-format", help="Don't add any message to the output",
                            dest="bare", action="store_true", default=False)

        parser.add_argument("-n", "--nodes", help="dumps list of nodes",
                            dest="nodes", action="store_true", default=False)

        parser.add_argument("-a", "--active-device-tree", help="dumps active device tree from procfs",
                            dest="active", action="store_true", default=False)

        parser.set_defaults(func=self.print)
        return parser

    def print(self, args) -> int:

        self.setup()

        if args.active:
                if not args.bare:
                    logging.info("** Dumping current device tree")
                logging.info(self.dump_current_dtb())
        else:
            for overlay in args.filename:

                if not os.path.isfile(overlay):
                    overlay=os.path.join(self.get_dt_search_path(), overlay)

                if not args.bare:
                    logging.info("** Dumping: " + overlay)

                if args.nodes:
                    logging.info(self.dump_dtb_nodes(overlay))
                else:
                    logging.info(self.dump_dtb(overlay))

        return 0

    def build_dtb(self, filename, outputpath=None, includepaths=None) -> str:
        """ Compile a dtbs file into dtb or dtbo output

            Args:
                filename (str) - path of source file
                outputpath (str) - output file name/folder, if None then extension
                    is appended to source file name, if it's a folder file with dtb/dtbo
                    extension is created
                includepaths (list) - list of additional include paths

            Returns:
                name of generated file

            Raises:
                Exception: invalid file name or build errors
        """

        if not os.path.isfile(filename):
            raise Exception("Invalid filename")

        ext=".dtb"

        with open(filename, "r") as f:
            for line in f:
                if "fragment@0" in line:
                    ext=".dtbo"
                    break

        if outputpath is None:
            outputpath="./"+os.path.basename(filename)+ext

        if os.path.isdir(outputpath):
            outputpath=os.path.join(
                outputpath, os.path.basename(filename)+ext)


        cppcmdline = ["cpp", "-nostdinc", "-undef", "-x", "assembler-with-cpp"]
        dtccmdline = ["dtc", "-@", "-I", "dts", "-O", "dtb"]

        if includepaths is not None:
            for path in includepaths:
                dtccmdline.append("-i")
                dtccmdline.append(path)
                cppcmdline.append("-I")
                cppcmdline.append(path)

        tmppath=filename+".tmp"

        dtccmdline += ["-o", outputpath, tmppath]
        cppcmdline += ["-o", tmppath, filename]

        cppprocess=subprocess.run(
            cppcmdline, stderr=subprocess.PIPE,)

        if cppprocess.returncode != 0:
            raise Exception("Failed to preprocess device tree.\n" +
                            cppprocess.stderr.decode("utf-8"))

        dtcprocess=subprocess.run(
            dtccmdline, stderr=subprocess.PIPE)

        if dtcprocess.returncode != 0:
            raise Exception("Failed to build device tree.\n" +
                            dtcprocess.stderr.decode("utf-8"))

        os.remove(tmppath)

        logging.info("Successfully built device tree")
        return outputpath

    def get_dt_search_path(self) -> str:
        """ Return folder where device trees are stored

            Functions checks loader enviroment to find the right ostree
            layer where currently usable device trees are stored.

            Returns:
                str - folder path (with final /)
        """
        searchpath=None

        with open("/boot/loader/uEnv.txt", "r") as f:
            for line in f:
                if line.startswith("fdtdir="):
                    searchpath=line[len("fdtdir="):]
                    searchpath=searchpath.rstrip()
                    break

        if searchpath is not None:
            searchpath="/boot"+searchpath

        return searchpath

    def get_active_dt_path(self, activedt) -> str:
        """ Returns full path of currently active device tree

            Args:
                activedt (str): device tree name (required for imx7)

            Returns:
                full path of device tree file or None if no dt is found

            Raises: Exception if multiple device trees are found in the folder and
                activedt arg is None
        """

        activedtpath=None
        searchpath=self.get_dt_search_path()

        if activedt is not None:
            activedtpath=os.path.join(searchpath, activedt)
        else:

            with open('/proc/device-tree/model', 'r') as f:
                model=f.read()

            # remove terminating null
            model=model[:len(model)-1]

            for path in os.listdir(searchpath):
                if (path.endswith(".dtb")):

                    dtbpath=os.path.join(searchpath, path)
                    if os.path.isfile(dtbpath):

                        dtbdump=self.dump_dtb(dtbpath)

                        tag="model = "

                        index=dtbdump.find(tag)

                        if index == -1:
                            continue

                        modelstr=dtbdump[index+len(tag)+1:]
                        modelstr=modelstr[:modelstr.find('"')]
                        modelstr=modelstr.replace("\\0", "\x00")

                        if model == modelstr:
                            if activedtpath is None:
                                activedtpath=dtbpath
                            else:
                                raise Exception(
                                    "Multiple device trees have the same model string, please select one with the -c command line parameter.")

        if activedtpath is None:
            raise Exception(
                "Cannot find a valid base binary device tree, please provide one with -c command line parameter.")

        return activedtpath

    def validate_dtb(self, filename, activedt) -> bool:
        """ Verifies that a compiled overlay is valid for the base device tree

            Args:
                filename (str) - path of overlay that needs to be validated
                activedt (str) - currently active device tree (needed on imx7)

            Returns:
                bool: True for valid overlay

            Raises:
                Exception - No active device tree
        """

        if not os.path.exists(filename) or not os.path.isfile(filename):
            raise Exception("Invalid file path.")

        activedtpath=self.get_active_dt_path(activedt)

        if activedtpath is None:
            raise Exception("Could not find active device tree.")

        fdtoverlay=subprocess.run(["fdtoverlay", "-i", activedtpath, "-o", "/tmp/" +
                                     os.path.basename(activedtpath)+".tmp", filename], stderr=subprocess.PIPE)

        if fdtoverlay.returncode != 0:
            errormessage = "Error running fdtdump."
            if fdtoverlay.returncode in DTConf.errormessages:
                errormessage += "\n" + \
                    DTConf.errormessages[fdtoverlay.returncode]
            errormessage += fdtoverlay.stderr.decode("utf-8")
            logging.error(errormessage)
            return False

        return True

    def get_overlays_file_path(self) -> str:
        """ Returns the path where overlay configuration file and binary overlays are stored

            Returns:
                str - folder path (without final /)
        """

        return self.bootmnt + "/overlays.txt"

    def get_active_overlays(self) -> typing.Tuple[typing.List[str], typing.List[str]]:
        """ Returns a list of overlay file configuration (without overlays line) and currently active overlays

            Returns:
                Tuple[List,List] - list of overlay file rows (excluding overlays)
                    and list of str objects with overlay filenames
        """

        overlaysfilepath=self.get_overlays_file_path()

        overlayslines=[]
        currentoverlays=[]

        if os.path.exists(overlaysfilepath):
            with open(overlaysfilepath, "r") as f:
                overlayslines=f.readlines()

        for line in overlayslines:
            if line.startswith("fdt_overlays="):
                overlayslines.remove(line)
                line=line[len("fdt_overlays="):].strip()
                currentoverlays=line.split()

        return overlayslines, currentoverlays

    def enable_overlay(self, overlay):
        """ Applies overlays to boot configuration

        Copy passed overlay files to boot partition and adds them to the list
        of overlays that are loaded at boot

        Args:
            overlays (str) - overlay file name
        """

        if not os.path.exists(overlay):
            raise Exception(overlay+" doesn't exists.")

        shutil.copy(overlay, self.bootmnt)
        overlayname=os.path.basename(overlay)

        overlayslines, currentoverlays=self.get_active_overlays()

        if overlayname not in currentoverlays:
            currentoverlays.append(overlayname)
        else:
            logging.info("Overlay "+overlay+" is already enabled")
            return

        overlaysline="fdt_overlays="

        for currentoverlay in currentoverlays:
            overlaysline += currentoverlay+" "

        overlayslines.append(overlaysline.strip()+"\n")

        with open(self.get_overlays_file_path(), "w") as f:
            f.writelines(overlayslines)

        logging.info("Overlay has been successfully enabled.")

    def disable_overlay(self, overlay):
        """ Applies overlays to boot configuration

        Remove an overlay from the list of those that are loaded at boot time

        Args:
            overlays (str) - overlay file name
        """

        overlayname=os.path.basename(overlay)

        overlayslines=[]
        overlayslines, currentoverlays=self.get_active_overlays()

        if overlayname not in currentoverlays:
            logging.info("Overlay "+overlay+" is currently not enabled")
            return

        overlaysline="fdt_overlays="

        for currentoverlay in currentoverlays:
            if overlayname != currentoverlay:
                overlaysline += currentoverlay+" "

        overlayslines.append(overlaysline.strip()+"\n")

        with open(self.get_overlays_file_path(), "w") as f:
            f.writelines(overlayslines)

    def disable_all_overlays(self):
        """ Applies overlays to boot configuration

        Remove all overlays that are configured at boot
        """

        overlayslines=self.get_active_overlays()[0]

        with open(self.get_overlays_file_path(), "w") as f:
            f.writelines(overlayslines)

    def activate_overlays(self, overlays, activedt):
        """ Builds, validates and applies multiple overlays

            Operation will stop if build/validation of one of the overlays fails

            Args:
                overlays (list) - list of dts files that should be used as overlays
                activedt (str) - current device tree, in None it will be auto-detected
        """

        builtoverlays=[]
        includepaths=[]

        if self.userepo:
            includepaths.append(os.path.join(self.gitrepo, "include"))
            includepaths.append(os.path.join(self.gitrepo, "dts-arm32"))

        for overlay in overlays:

            overlaypath=overlay

            if self.userepo:
                overlaypath=os.path.join(self.gitrepo, "overlays")
                overlaypath=os.path.join(overlaypath, overlay)

            logging.info("Building "+overlay)
            outfile=self.build_dtb(overlaypath, None, includepaths)
            logging.info("Validating "+outfile)

            if not self.validate_dtb(outfile, activedt):
                raise Exception("Invalid overlay")

            logging.info("Overlay is valid.")
            builtoverlays.append(outfile)

        for builtoverlay in builtoverlays:
            self.enable_overlay(builtoverlay)

    def dump_dtb(self, filename) -> str:
        """ Dumps a dtb binary in dts-like format

            The generated output may not be a valid dts, this function
            can be used for debugging/validation only

            Args:
                filename(str) - path of dtb file

            Returns:
                dump of dtb contents in human-redable format
        """

        if not os.path.exists(filename):
            raise Exception("Invalid filename")

        fdtdumpprocess=subprocess.run(
            ["dtc", "-I", "dtb", "-O", "dts", "-q", filename],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        if fdtdumpprocess.returncode != 0:
            errormessage = "Error running fdtdump."
            if fdtdumpprocess.returncode in DTConf.errormessages:
                errormessage += "\n"+DTConf.errormessages[fdtdumpprocess.returncode]
            errormessage+=fdtdumpprocess.stderr.decode("utf-8")
            raise Exception(errormessage)

        return fdtdumpprocess.stdout.decode("utf-8")

    def _dump_node(self,rootnode,level,nodelist) -> str:
        """[summary]

        Arguments:
            rootnode {FdtNode} -- Node to be dumped
            level {int} -- Recursion level
            nodelist {list} -- list of nodes already dumped (to avoid loops)

        Returns:
            str -- [description]
        """

        nodedump=""
        ident=' ' * level
        nodelist.append(rootnode)

        nodedump += ident+"+"+rootnode.name+"\n"

        for (path, node) in rootnode.walk():
            if isinstance(node,FdtNode):
                if not node in nodelist:
                    nodedump+=self._dump_node(node,level+1,nodelist)
            elif isinstance(node, FdtPropertyStrings):
                separator=","
                nodedump += ident+" -"+node.name + \
                    "=(s)"+separator.join(node.strings)+"\n"
            elif isinstance(node, FdtPropertyBytes):
                separator = ","
                nodedump += ident+" -"+node.name+"=(b)" + \
                    separator.join(map(hex, node.bytes))+"\n"
            elif isinstance(node, FdtPropertyWords):
                separator=","
                nodedump += ident+" -"+node.name+"=(w)" + \
                    separator.join(map(hex, node.words))+"\n"

        return nodedump

    def dump_dtb_nodes(self,overlay) -> str:
        """ Dumps a node list for a dtb

            Args:
                filename(str) - path of dtb file

            Returns:
                dump of dtb contents in human-redable format
        """
        with open(overlay,"rb") as f:
            dtb = FdtBlobParse(f)

        fdt = dtb.to_fdt()

        return self._dump_node(fdt.resolve_path("/"),0,[])

    def dump_current_dtb(self) -> str:
        """ Dumps a node list for the current dtb

            Returns:
                dump of dtb contents in human-redable format
        """
        fdt = FdtFsParse("/proc/device-tree")

        return self._dump_node(fdt.resolve_path("/"),0,[])

    def create_help(self):

        parser=argparse.ArgumentParser(
            description="Device tree overlay configuration tool")

        subparsers = parser.add_subparsers(title="Possible subcommands")

        # Set commands
        for command in self.commands:
            subparser = subparsers.add_parser(command["command"], help=command["description"])
            getattr(self, command["createparser"])(subparser)

        return parser

    def run(self, args) -> int:
        """ Processes command line arguments and return an exit code
        """

        parser = self.create_help()

        args = parser.parse_args()

        if hasattr(args, "func"):
            # Call the actual function registered in createparser
            return args.func(args)
        else:
            parser.print_help()


if __name__ == "__main__":

    try:
        dtconf=DTConf()

        sys.exit(dtconf.run(sys.argv))

    except Exception as e:
        logging.error(str(e))
        sys.exit(-1)
